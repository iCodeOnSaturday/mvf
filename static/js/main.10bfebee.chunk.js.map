{"version":3,"sources":["useInput.js","guessFavoriteLang.js","SearchCard.js","App.js","serviceWorker.js","index.js"],"names":["useInput","initialValue","useState","value","setValue","bind","onChange","event","target","fetchReposByUser","userName","fetch","then","res","json","catch","err","filterReposByForked","repos","isForked","filter","repo","fork","calculateRepoAverageSize","size","forEach","length","calculateLanguagesContributions","languageContributions","valueFactor","undefined","language","parseInt","calculateLanguagesContributionsByForked","sizeFactor","guessFavoriteLang","a","notForkedRepos","forkedRepos","repoAverageSize","relativeLanguageSize","Object","entries","map","key","max","favoriteLanguage","item","Promise","resolve","reject","FlexWrapper","styled","div","SearchInput","input","SearchLabel","label","SubmitButton","button","ResultText","SearchCard","bindInputUserNameField","isSearching","setIsSearching","hasResult","result","setResult","search","response","errror","htmlFor","type","data-testid","id","name","aria-label","onClick","style","fontSize","marginRight","spin","className","icon","faSync","BackgroundImage","HeaderIntroText","h2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10bfebee.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport const useInput = (initialValue) => {\n    const [value, setValue] = useState(initialValue);\n\n    let field = {\n        value,\n        setValue,\n        bind: {\n            value,\n            onChange: event => {\n                setValue(event.target.value);\n            }\n        },\n    };\n\n    return field;\n};\n\nexport default useInput;","const API_ENDPOINT = \"https://api.github.com\";\n\nconst fetchReposByUser = (userName) => {\n    return fetch(`${API_ENDPOINT}/users/${userName}/repos`)\n        .then(res => res.json())\n        .then(json => {\n            return json\n        })\n        .catch((err) => {\n            return err\n        })\n}\n\nconst filterReposByForked = (repos, isForked) => {\n    return repos.filter((repo) => {\n        if (repo.fork === isForked) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    })\n};\n\nconst calculateRepoAverageSize = (repos) => {\n    let size = 0;\n    repos.forEach((repo) => {\n        size = repo.size;\n    })\n    return size / repos.length;\n};\n\nconst calculateLanguagesContributions = (languageContributions, repos, valueFactor) => {\n    repos.forEach((repo) => {\n        if (languageContributions[repo.language] === undefined) {\n            languageContributions[repo.language] = repo.size * valueFactor\n        }\n        else {\n            languageContributions[repo.language] = repo.size * valueFactor + parseInt(languageContributions[repo.language])\n        }\n    })\n    return languageContributions;\n\n};\n\nconst calculateLanguagesContributionsByForked = (languageContributions, repos, valueFactor, sizeFactor) => {\n    repos.forEach((repo) => {\n        if (languageContributions[repo.language] === undefined) {\n            languageContributions[repo.language] = sizeFactor * valueFactor\n        }\n        else {\n            languageContributions[repo.language] = sizeFactor * valueFactor + parseInt(languageContributions[repo.language])\n        }\n    })\n    return languageContributions;\n};\n\n/*Favorite language is the one with the biggest accrued size/value\nForked repos has a valueFactor 1, own repos has a valuefactor 5. This is why its 'relative'\nForked repos counts, but not the actual size, a forked repo is given the averageSize of users repos and given a valuefactor=1*/\nexport const guessFavoriteLang = async(userName) => {\n    const repos = await fetchReposByUser(userName);\n    if (repos.length > 0) {\n        let notForkedRepos = filterReposByForked(repos, false);\n        let forkedRepos = filterReposByForked(repos, true);\n        forkedRepos = forkedRepos.filter((repo) => repo.language !== null);\n        notForkedRepos = notForkedRepos.filter((repo) => repo.language !== null);\n        let repoAverageSize = calculateRepoAverageSize(notForkedRepos);\n        let relativeLanguageSize = {}\n        relativeLanguageSize = calculateLanguagesContributions(relativeLanguageSize, notForkedRepos, 5);\n        relativeLanguageSize = calculateLanguagesContributionsByForked(relativeLanguageSize, forkedRepos, 1, repoAverageSize);\n        relativeLanguageSize = Object.entries(relativeLanguageSize).map(([key, value]) => ({key, value}));\n\n        var max = relativeLanguageSize[0].value\n        let favoriteLanguage = relativeLanguageSize.filter((item) => {\n            if (item.value >= max) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        })\n        return Promise.resolve(favoriteLanguage[0].key);\n    }\n    else {\n        return Promise.reject('No repositories for that user');\n    }\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components/macro\";\nimport useInput from './useInput.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\nimport { guessFavoriteLang } from \"./guessFavoriteLang\";\n\nexport const FlexWrapper = styled.div`\n   background: rgba(35, 51, 75, 0.7) none repeat scroll 0% 0% / auto padding-box border-box;\n   display: flex;\n   flex-direction: column;\n   margin: auto;\n   width: 200px;\n   padding-top: 30px;\n   padding-bottom: 30px;\n   padding-left: 15%;\n   padding-right: 15%;\n   border-radius: 5px;\n`;\n\nexport const SearchInput = styled.input`\n    display: inline-flex;\n    width: 100%;\n    height: 2.25rem;\n    padding: .375rem .75rem;\n    border: .0625rem solid #b2b2bf;\n    border-radius: .1875rem;\n    background: #fff;\n    color: #111236;\n    -webkit-appearance: none;\n    width: 200px;\n    font-weight: 700;\n`;\n\nexport const SearchLabel = styled.label`\n    display: inline-flex;\n    margin-bottom: 10px;\n    color: white;\n`;\n\nexport const SubmitButton = styled.button`\n    background: rgb(54, 192, 96) none repeat scroll 0% 0% / auto padding-box border-box;\n    padding: 12px;\n    margin-top: 10px;\n    border-radius: 5px;\n    border: none;\n    color: white;\n    font-size: 12px;\n    font-weight: 700;\n`;\n\nexport const ResultText = styled.div`\n    margin: auto;\n    text-align: center;\n    margin-top: 30px;\n    color: white;\n    font-weight: 700;\n    font-size:18px;\n`;\n\nexport const SearchCard = () => {\n\n    const { bind:bindInputUserNameField } = useInput('');\n    const [isSearching, setIsSearching] = useState(false);\n    const [result, setResult] = useState({hasResult: false, value: ''});\n\n    const search = async() => {\n        setIsSearching(true);\n        guessFavoriteLang(bindInputUserNameField.value).then((response) => {\n            setResult({hasResult: true, value: response})\n            setIsSearching(false)\n        }).catch((errror) => {\n            setResult({hasResult: true, value: errror})\n            setIsSearching(false)\n        })\n    }\n\n    return (<FlexWrapper>\n        <SearchLabel htmlFor=\"user-name-search\">Search by user name</SearchLabel>\n        <SearchInput type=\"search\" data-testid=\"search-testid\" id=\"user-name-search\" name=\"q\"\n                     aria-label=\"Search by user name\"\n            {...bindInputUserNameField} />\n        <SubmitButton onClick={search} type=\"submit\" >\n            <span style={{fontSize: '14px', marginRight: '10px'}}>{!isSearching ? 'Search' : 'Loading'}</span>\n            {isSearching ? <FontAwesomeIcon data-testid=\"spinner-testid\" spin className='icon-element__icon' size=\"sm\" icon={faSync}/> : null}\n        </SubmitButton>\n        {result.hasResult && <ResultText data-testid=\"result-testid\">{result.value}</ResultText>}\n    </FlexWrapper>)\n\n}\nexport default SearchCard\n\n","import React from 'react';\nimport styled from \"styled-components/macro\";\nimport SearchCard from './SearchCard'\n\nexport const BackgroundImage = styled.div`\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    top: 0;\n    left: 0;\n`;\n\nexport const HeaderIntroText = styled.h2`\n   color: white;\n   padding: 20px;\n   font-size: 24px;\n   font-weight: 700;\n   margin: auto;\n   width: fit-content;\n`;\n\nfunction App() {\n    return (\n        <BackgroundImage\n            style={{\"backgroundImage\": `url(https://images.unsplash.com/photo-1497366754035-f200968a6e72?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1650&q=80)`}}>\n            <header>\n                <HeaderIntroText>This app guesses the Github user's favourite programming language.</HeaderIntroText>\n            </header>\n            <main>\n                <SearchCard />\n            </main>\n        </BackgroundImage>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}